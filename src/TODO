?DONE?> Turn BIG array of SDL_Rects into one of only monsternum every frame
> Feed this little array into movemap

~~~ Movement and timing ~~~

!DONE!	> Turn frame-based translations into time-based (for vastly easier rhythm making)
	> Possibly keep sprite animations frame-based -- maybe multiples of 30fps? Would mean game can run at 30x fps.	This would mean having some kind of time-based clock and a frame based clock.
!DONE!	> Take animations out of level.c code and into some kind of organised function that finds the right animation frame -- maybe for each sprite have an "animation frame #" value, with an array of animation frame numbers that are pointers to the coordinates on the png?

	> Turn big list of all different sprite objects into some kind of unified array.

	> Lump all of the level.c initialisation, and config-y stuff into some kind of initialise() function call.

	> Have a held item that can be used with spacebar

!DONE!	> Use hjkl keys to jump to any of 4 rows, and asdf to use a particular weapon

	> Have a "helpful HUD" mode that displays suggestion notifications for which weapon to use, when to use held item, etc.

	> Make cfg able to input arbitrary monsters

	> Have events for:
		- Minibosses/bosses
		- Level completion
		- Arbitrary events that can come along at particular beats

	> Have some way to sync music and beat to keep them locked together over multiple pauses.

	> Fix broken restart and return to startscreen

	> Fix segfault on setting total lane number too high in level.cfg (not sure how high is too high)

------ 2018-03-10 ---------

	> As well as purely function-based transformations, have some kind of frame-based-with-interpolation transformation system too.

	> Add method to log the render_node list (or changes to it?) every frame. This could be stored and played back as a film later.

	> Add a module/dynamic library system, possibly with the option of a whole python interpreter that can edit variables and call functions from another thread/process. Look into restricting function calls to a set of the ones in the game for security.
