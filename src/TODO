?DONE?> Turn BIG array of SDL_Rects into one of only monsternum every frame
> Feed this little array into movemap

~~~ Movement and timing ~~~

!DONE!	> Turn frame-based translations into time-based (for vastly easier rhythm making)
	> Possibly keep sprite animations frame-based -- maybe multiples of 30fps? Would mean game can run at 30x fps.	This would mean having some kind of time-based clock and a frame based clock.
!DONE!	> Take animations out of level.c code and into some kind of organised function that finds the right animation frame -- maybe for each sprite have an "animation frame #" value, with an array of animation frame numbers that are pointers to the coordinates on the png?

	> Turn big list of all different sprite objects into some kind of unified array.

	> Lump all of the level.c initialisation, and config-y stuff into some kind of initialise() function call.

	> Have a held item that can be used with spacebar

!DONE!	> Use hjkl keys to jump to any of 4 rows, and asdf to use a particular weapon

	> Have a "helpful HUD" mode that displays suggestion notifications for which weapon to use, when to use held item, etc.

	> Make cfg able to input arbitrary monsters

	> Have events for:
		- Minibosses/bosses
		- Level completion
		- Arbitrary events that can come along at particular beats

	> Have some way to sync music and beat to keep them locked together over multiple pauses.

	> Fix broken restart and return to startscreen

	> Fix segfault on setting total lane number too high in level.cfg (not sure how high is too high)

------ 2018-03-10 ---------

	> As well as purely function-based transformations, have some kind of frame-based-with-interpolation transformation system too.

	> Add method to log the render_node list (or changes to it?) every frame. This could be stored and played back as a film later.

	> Add a module/dynamic library system, possibly with the option of a whole python interpreter that can edit variables and call functions from another thread/process. Look into restricting function calls to a set of the ones in the game for security.

	>	Add a CSS-type mechanism. Declare either in C code or in a txt file that is read in. The latter would need some kind of dictionary implementation (this may also be needed if you want to declare what box an object occupies in a txt file).

	>	CSS system sub-boxes could have varying types (inherit node, anchor type=top left/centre, binary parents (union, intersection, exclusion, etc).

	>	Work on freeing everything necessary after leaving/restarting a level so that multiple levels don't accumulate memory.

	>	In the main loop, maybe change from a return code system to having some kind of "program->func_ptr" that tells the loop what to do next. func_ptr could be level_init/level_loop/pausefunc/etc...

	>	Merkle tree for finding box position/size alterations each frame from just the screen box? Could be overkill unless you have extremely deeply nested boxes. Could just perform necessary updates on structs the moment you make the change.

------ 2018-11-18 ---------

>	Have recursive free functions with callbacks. Eg:

struct a {
	int *a1;
	struct b *a2;
} A;

struct b {
	float b1;
	char *b2;
	struct a *b3;
} B;

void free_a(void *ptr) {
	struct a *A = (struct a *)ptr;
	free(A->a1);
	free_b(A->a2);
	free(A);
}

void free_b(void *ptr) {
	struct b *B = (struct b *)ptr;
	free(B->b2);
	// DON'T free the pointer back to struct a
	free(B);
}

------ 2018-11-23 ---------

	>	Was thinking about having function in python part that can break and resume where it left off. Just realised that this sounds like "yield". Try this out.


------ 2019-04-23 ---------

	>	Reverse order of object logic so that it starts on the one that spawned first
